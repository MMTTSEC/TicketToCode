@inject HttpClient http
@inject NavigationManager nav

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">TicketToCode.Blazor</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @if (userRole == "Admin" || userRole == "User")
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/MyTickets">
                <span class="bi bi-ticket-perforated" aria-hidden="true"></span> My Tickets
            </NavLink>
        </div>
        }
        @if (userRole == "Admin")
        {
            <div class="nav-item px-3 dropdown">
                <a class="nav-link dropdown-toggle" href="#" id="adminDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            <span class="bi bi-person-badge" aria-hidden="true"></span> Admin
        </a>
        <ul class="dropdown-menu" aria-labelledby="adminDropdown">
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="users">
                    <span class="bi bi-person-circle" aria-hidden="true"></span> Users
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="/AllTickets">
                    <span class="bi bi-ticket-perforated" aria-hidden="true"></span> All Tickets
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="stats">
                    <span class="bi bi-graph-down" aria-hidden="true"></span> Statistics
                </NavLink>
            </li>
        </ul>
        </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private string userRole = string.Empty;
    private string username = string.Empty;
    private EventHandler<LocationChangedEventArgs>? locationChangedHandler;

    protected override async Task OnInitializedAsync()
    {
        await GetUserRole();

        // Set up navigation event handler to refresh auth state on navigation
        locationChangedHandler = async (sender, args) => await OnLocationChanged(args);
        nav.LocationChanged += locationChangedHandler;
    }

    private async Task OnLocationChanged(LocationChangedEventArgs args)
    {
        await GetUserRole();
        StateHasChanged();
    }

    public void Dispose()
    {
        // Clean up the event handler when component is disposed
        if (locationChangedHandler != null)
        {
            nav.LocationChanged -= locationChangedHandler;
        }
    }

    private async Task GetUserRole()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7206/auth/role");
            request.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);

            var response = await http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var authData = await response.Content.ReadFromJsonAsync<AuthData>();
                if (authData != null)
                {
                    userRole = authData.Role;
                    username = authData.Username;
                }
            }
            else
            {
                // Clear user data if not authenticated
                userRole = string.Empty;
                username = string.Empty;
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error getting user role: {ex.Message}");
            // Clear user data on error
            userRole = string.Empty;
            username = string.Empty;
        }
    }

    private class AuthData
    {
        public string Username { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
    }



}
