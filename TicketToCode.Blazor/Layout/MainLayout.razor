@inherits LayoutComponentBase
@inject NavigationManager nav
@inject TicketToCode.Blazor.Services.AuthService authService
@implements IDisposable

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <div id="admin-links-wrapper">
                @if (userRole == "Admin")
                {
                    <a class="admin-links" href="createEvent">Create Event</a>
                }
            </div>
            <div class="auth-links">
                @if (string.IsNullOrEmpty(username))
                {
                    <a href="login">Login/Register</a>
                }
                else
                {
                    <span class="me-3">Welcome, @username!</span>
                    <button class="btn btn-link" @onclick="Logout">Logout</button>
                }
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private string userRole = string.Empty;
    private string username = string.Empty;
    private EventHandler<LocationChangedEventArgs>? locationChangedHandler;

    protected override async Task OnInitializedAsync()
    {
        await UpdateAuthState();

        // Set up navigation event handler to refresh auth state on navigation
        locationChangedHandler = async (sender, args) => await OnLocationChanged(args);
        nav.LocationChanged += locationChangedHandler;
    }

    private async Task OnLocationChanged(LocationChangedEventArgs args)
    {
        await UpdateAuthState();
        StateHasChanged();
    }

    public void Dispose()
    {
        // Clean up the event handler when component is disposed
        if (locationChangedHandler != null)
        {
            nav.LocationChanged -= locationChangedHandler;
        }
    }

    private async Task UpdateAuthState()
    {
        var isAuthenticated = await authService.IsAuthenticatedAsync();

        if (isAuthenticated)
        {
            username = await authService.GetUsernameAsync();
            userRole = await authService.GetUserRoleAsync();
        }
        else
        {
            username = string.Empty;
            userRole = string.Empty;
        }
    }

    private async Task Logout()
    {
        await authService.LogoutAsync();
        await UpdateAuthState();
        nav.NavigateTo("/", true);
    }
}
