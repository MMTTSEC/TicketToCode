@page "/login"
@inject NavigationManager nav
@inject HttpClient http

<PageTitle>Login</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <ul class="nav nav-tabs card-header-tabs">
                        <li class="nav-item">
                            <button class="nav-link @(activeTab == "login" ? "active text-dark" : "text-white")"
                                    @onclick='() => activeTab = "login"'>
                                Login
                            </button>
                            <button class="nav-link @(activeTab == "register" ? "active text-dark" : "text-white")"
                                    @onclick='() => activeTab = "register"'>
                                Register
                            </button>

                        </li>
                    </ul>
                </div>
                <div class="card-body">
                    @if (activeTab == "login")
                    {
                        <h3 class="card-title text-center mb-4">Login</h3>
                        <EditForm Model="loginModel" OnSubmit="LoginFormMethod">
                            <div class="mb-3">
                                <label for="username" class="form-label">Username</label>
                                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                            </div>
                            @if (!string.IsNullOrEmpty(loginErrorMessage))
                            {
                                <div class="alert alert-danger mt-2 mb-3">@loginErrorMessage</div>
                            }
                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary">Login</button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <h3 class="card-title text-center mb-4">Register</h3>
                        <EditForm Model="registerModel" OnSubmit="RegisterFormMethod">
                            <div class="mb-3">
                                <label for="reg-username" class="form-label">Username</label>
                                <InputText id="reg-username" class="form-control" @bind-Value="registerModel.Username" />
                            </div>
                            <div class="mb-3">
                                <label for="reg-password" class="form-label">Password</label>
                                <InputText id="reg-password" type="password" class="form-control" @bind-Value="registerModel.Password" />
                            </div>
                            <div class="mb-3">
                                <label for="confirm-password" class="form-label">Confirm Password</label>
                                <InputText id="confirm-password" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" />
                                @if (!string.IsNullOrEmpty(passwordMatchError))
                                {
                                    <div class="text-danger mt-1">@passwordMatchError</div>
                                }
                            </div>
                            @if (!string.IsNullOrEmpty(registerErrorMessage))
                            {
                                <div class="alert alert-danger mt-2 mb-3">@registerErrorMessage</div>
                            }
                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary">Register</button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string activeTab = "login";
    private string passwordMatchError = string.Empty;
    private string loginErrorMessage = string.Empty;
    private string registerErrorMessage = string.Empty;

    private class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private class RegisterModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private LoginModel loginModel = new();
    private RegisterModel registerModel = new();

    private async Task LoginFormMethod()
    {
        try
        {
            loginErrorMessage = string.Empty;
            
            var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7206/auth/login");
            request.Content = JsonContent.Create(new { Username = loginModel.Username, Password = loginModel.Password });
            request.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);
    
            var response = await http.SendAsync(request);
            
            if (response.IsSuccessStatusCode)
            {
                // The cookie is set by the server, so we just need to navigate
                nav.NavigateTo("/", true);
            }
            else
            {
                // Read the error content safely
                var errorContent = await response.Content.ReadAsStringAsync();
                
                try
                {
                    
                    var errorObj = System.Text.Json.JsonSerializer.Deserialize<ErrorResponse>(errorContent);
                    loginErrorMessage = errorObj?.Message ?? "Invalid username or password";
                }
                catch
                {
                    
                    loginErrorMessage = !string.IsNullOrWhiteSpace(errorContent) ? 
                        errorContent.Trim('"') : "Invalid username or password";
                }
                
                Console.Error.WriteLine($"Login error: {loginErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            loginErrorMessage = "An error occurred during login";
            Console.Error.WriteLine($"Login exception: {ex}");
        }
    }

    async Task RegisterFormMethod()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            passwordMatchError = "Passwords do not match";
            return;
        }
        
        passwordMatchError = string.Empty;
        registerErrorMessage = string.Empty;
        
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7206/auth/register");
            request.Content = JsonContent.Create(new { Username = registerModel.Username, Password = registerModel.Password });
            request.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);
    
            var response = await http.SendAsync(request);
    
            if (response.IsSuccessStatusCode)
            {
                // After successful registration, switch to login tab
                activeTab = "login";
                loginModel.Username = registerModel.Username;
                registerModel = new RegisterModel();
            }
            else
            {
                
                var errorContent = await response.Content.ReadAsStringAsync();
                
                try
                {
                    
                    var errorObj = System.Text.Json.JsonSerializer.Deserialize<ErrorResponse>(errorContent);
                    registerErrorMessage = errorObj?.Message ?? "Username already exists";
                }
                catch
                {
                    
                    registerErrorMessage = !string.IsNullOrWhiteSpace(errorContent) ? 
                        errorContent.Trim('"') : "Username already exists";
                }
                
                Console.Error.WriteLine($"Registration error: {registerErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            registerErrorMessage = "An error occurred during registration";
            Console.Error.WriteLine($"Registration exception: {ex}");
        }
    }
    
    
    private class ErrorResponse
    {
        public string Message { get; set; } = string.Empty;
    }
}