@page "/stats"
@inject NavigationManager nav
@inject HttpClient http
@inject TicketToCode.Blazor.Services.AuthService authService

<PageTitle>Statistics</PageTitle>

@if (isLoading)
{
    <p class="text-center">Loading...</p>
}
else if (!isAdmin)
{
    <div class="alert alert-danger text-center">
        <h2>Access Denied</h2>
        <p>You must be an administrator to access this page.</p>
        <a href="/" class="btn btn-primary">Return to Home</a>
    </div>
}
else
{
    <h1 class="text-center my-4">Stats</h1>

    @if (ticketStats == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="container mt-4">
            <div class="row">
                <div class="col-md-6">
                    <div class="card mb-4 stat-card">
                        <div class="card-body">
                            <h5 class="card-title">Total Tickets</h5>
                            <p class="card-text">@ticketStats.TotalTickets</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card mb-4 stat-card">
                        <div class="card-body">
                            <h5 class="card-title">Total Events With Tickets</h5>
                            <p class="card-text">@ticketStats.TotalEventsWithTickets</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card mb-4 stat-card">
                        <div class="card-body">
                            <h5 class="card-title">Average Tickets Per Event</h5>
                            <p class="card-text">@ticketStats.AverageTicketsPerEvent</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card mb-4 stat-card">
                        <div class="card-body">
                            <h5 class="card-title">Max Tickets For Single Event</h5>
                            <p class="card-text">@ticketStats.MaxTicketsForSingleEvent</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

<style>
    .stat-card {
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .stat-card:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .stat-card .card-body {
        background-color: #f8f9fa;
        border-radius: 0.25rem;
    }

    .stat-card .card-title {
        color: #007bff;
    }

    .stat-card .card-text {
        color: #6c757d;
    }
</style>

@code {
    private class TicketStats
    {
        public int TotalTickets { get; set; }
        public int TotalEventsWithTickets { get; set; }
        public int AverageTicketsPerEvent { get; set; }
        public int MaxTicketsForSingleEvent { get; set; }
    }

    private TicketStats? ticketStats;
    private bool isAdmin = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await CheckAdminAccess();
        if (isAdmin)
        {
            await GetStats();
        }
        isLoading = false;
    }

    private async Task CheckAdminAccess()
    {
        try
        {
            // Use AuthService instead of calling /auth/role endpoint
            isAdmin = await authService.IsAuthenticatedAsync() &&
            (await authService.GetUserRoleAsync()) == "Admin";

            if (!isAdmin)
            {
                nav.NavigateTo("/"); // Redirect non-admins to home page
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Auth check error: {ex.Message}");
            isAdmin = false;
        }
    }

    private async Task GetStats()
    {
        try
        {
            // Use AuthService to create an authorized request
            var request = await authService.CreateAuthorizedRequestMessage(
            HttpMethod.Get, "https://localhost:7206/tickets/stats");

            var response = await http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                Console.WriteLine("API Response: " + jsonResponse);

                ticketStats = await response.Content.ReadFromJsonAsync<TicketStats>();
                Console.WriteLine("Deserialized Stats: " + ticketStats);
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                // Handle unauthorized access
                await authService.LogoutAsync();
                nav.NavigateTo("/login");
            }
            else
            {
                Console.WriteLine("Failed to fetch stats: " + response.ReasonPhrase);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Exception: " + e.Message);
        }
    }
}
