@page "/alltickets"
@inject NavigationManager nav
@inject HttpClient http

<h1>All Tickets</h1>
@if (error != null)
{
    <div class="alert alert-danger">@error</div>
}
else if (tickets == null)
{
    <p>Loading...</p>
}
else if (!tickets.Any())
{
    <p>No tickets found.</p>
}
else
{
    @foreach (var eventItem in events) {
        <div class="container mt-4">
            <h2 style="color: #4d2965;"><span style="color:#591487; font-size: 2rem; font-weight: bold;;">#@eventItem.Id</span> @eventItem.Name</h2>
            <div class="row g-4">
                @foreach (var ticket in tickets)
                {
                    @if (ticket.EventId == eventItem.Id) {
                        <div class="col-md-6">
                            <div class="ticket-card">
                            <button class="cancel-ticket" @onclick="() => CancelTicket(ticket.TicketId, eventItem.Id, eventItem.Bookings)" title="Cancel Ticket">
                                ❌
                            </button>
                            <div class="ticket-header">@eventItem.Name</div>
                            <p><strong>Ticket ID:</strong> @ticket.TicketId</p>
                            <p><strong>Event ID:</strong> @ticket.EventId</p>
                        </div>
                    </div>
                    }
                }
            </div>
        </div>
    }
}

@code {
    private List<Event> events = new List<Event>();
    private List<TicketResponse>? tickets;

    private async Task GetEventsAsync()
    {
        try
        {
            // Call your API and deserialize the response into the 'events' list
            events = await http.GetFromJsonAsync<List<Event>>("https://localhost:7206/events");

            // You can log the data or inspect if needed
            Console.WriteLine($"Events fetched: {events.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching events: {ex.Message}");
        }
    }
    public class Event
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public int Bookings { get; set; }
    }

    private string? error;

    protected override async Task OnInitializedAsync()
    {
        await GetEventsAsync();
        await LoadTickets();
    }

    private async Task LoadTickets()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7206/tickets/all");
            request.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);

            var response = await http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                tickets = await response.Content.ReadFromJsonAsync<List<TicketResponse>>();
            }
            else
            {
                error = $"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            error = $"Error fetching tickets: {ex.Message}";
            Console.Error.WriteLine($"Error fetching tickets: {ex.Message}");
        }
    }

    private async Task CancelTicket(int ticketId, int eventId, int CurrentBookings)
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Delete, $"https://localhost:7206/tickets/{ticketId}");
            request.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);

            var response = await http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                http.PutAsJsonAsync($"https://localhost:7206/events/updatebooking/{eventId}", new { Bookings = CurrentBookings - 1 });
                nav.NavigateTo("/alltickets", true);
            }
            else
            {
                error = $"Error canceling ticket: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            error = $"Error canceling ticket: {ex.Message}";
            Console.Error.WriteLine($"Error canceling ticket: {ex.Message}");
        }
    }

    private class TicketResponse
    {
        public int TicketId { get; set; }
        public int EventId { get; set; }
    }
}
