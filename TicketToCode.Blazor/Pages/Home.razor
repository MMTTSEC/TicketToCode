@page "/"
@inject NavigationManager nav
@inject HttpClient http
@inject TicketToCode.Blazor.Services.AuthService authService

<PageTitle>Home</PageTitle>

<h1>Events</h1>
<input class="search" type="text" @bind="SearchQuery" @bind:event="oninput" @bind:after="Search" placeholder="Search..."/>

@if (events.Count == 0) {
    <p class="noEventsFound">There are currently no events available.</p>
} else {
    <section id="events-wrapper">
        @foreach (var eventItem in events) {
            if (eventItem.Name.ToUpper().Contains(SearchQuery.ToUpper()))
            {
                SearchResultsFound++;
                <div id="event-@eventItem.Id" class="event-card">
                    @if (userRole != null && userRole == "Admin")
                    {

                        <div class="admin-options">
                            <a href="/editevent?eventid=@eventItem.Id&eventname=@eventItem.Name&eventdescription=@eventItem.Description&eventtype=@eventItem.Type&eventstarttime=@eventItem.Start&eventendtime=@eventItem.End&eventmaxattendees=@eventItem.MaxAttendees" class="crud-update">
                                <span>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                        <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                        <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z" />
                                    </svg>
                                </span>
                            </a>

                            <a href="" class="crud-delete" @onclick="() => DisplayPopup(eventItem.Id, RequestType.Delete, eventItem.Bookings)">
                                <span>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                        <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                                    </svg>
                                </span>
                            </a>
                        </div>
                    }
                    <h2>@eventItem.Name <span class="event-type">@eventItem.Type</span></h2>
                    <p class="event-description">@eventItem.Description</p>
                    <p class="event-date"><span class="event-start">Event Start: @eventItem.Start.ToString("yyyy-MM-dd HH:mm")</span><br /> <span class="event-end">Event End: @eventItem.End.ToString("yyyy-MM-dd HH:mm")</span></p>
                    <p class="event-attendees">
                        @if (RemainingSeats >= 0) { RemainingSeats = eventItem.MaxAttendees - eventItem.Bookings; }
                        <span class="@(RemainingSeats == 0 ? "error" : (RemainingSeats < (eventItem.MaxAttendees / 2)) ? "warning" : "success")">
                            @RemainingSeats
                            / @eventItem.MaxAttendees</span><br />Tickets Remaining
                    </p>

                    <div class="event-actions">
                        @{
                            RemainingSeats = eventItem.MaxAttendees - eventItem.Bookings;
                        }
                        
                        @if (RemainingSeats > 0 && isAuthenticated)
                        {
                            <button class="btn btn-primary" @onclick="() => DisplayPopup(eventItem.Id, RequestType.BookTicket, eventItem.Bookings)">Book Ticket</button>
                        }
                        else if (RemainingSeats == 0)
                        {
                            <button class="btn btn-secondary" disabled>Sold Out</button>
                        }
                        else if (!isAuthenticated)
                        {
                            <a href="/login" class="btn btn-outline-primary">Login to Book</a>
                        }
                    </div>
                </div>
            }
        }
        @if (SearchResultsFound == 0) {
            <p class="noEventsFound">No events found...</p>
        }
    </section>
    @if (ShowPopup) {
        <div class="popup">
            <div class="popup-window">
                <h4>@PopupTitle</h4>
                <div class="popup-buttons">
                    <button class="popup-button-yes" @onclick="PopupConfirmed">Yes</button>
                    <button class="popup-button-no" @onclick="PopupCanceled">Cancel</button>
                </div>
            </div>
        </div>
    }
}
@code {
    public int SearchResultsFound = 0;
    public string SearchQuery = "";
    public int RemainingSeats = 0;
    private List<Event> events = new List<Event>();
    private bool isAuthenticated = false;
    private string userRole = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthentication();
        await GetEventsAsync();
    }

    private async Task CheckAuthentication()
    {
        try
        {
            // Use AuthService instead of calling /auth/role endpoint
            isAuthenticated = await authService.IsAuthenticatedAsync();
            if (isAuthenticated)
            {
                userRole = await authService.GetUserRoleAsync();
                Console.WriteLine($"User authenticated with role: {userRole}");
            }
            else
            {
                Console.WriteLine("User not authenticated");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Auth check error: {ex.Message}");
            isAuthenticated = false;
        }
    }

    private async Task AddEventsWhenLoading() {
        await http.PostAsJsonAsync("https://localhost:7206/events/create", new Event { Name = "Event 1", Description = "Event 1 Description, Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.", Type = EventType.Concert, Start = DateTime.Parse("2025-04-01 18:00"), End = DateTime.Parse("2025-04-01 21:00"), MaxAttendees = 100, Bookings = 100 });
        await http.PostAsJsonAsync("https://localhost:7206/events/create", new Event { Name = "Event 2", Description = "Event 2 Description, Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.", Type = EventType.Festival, Start = DateTime.Parse("2025-04-02 18:00"), End = DateTime.Parse("2025-04-04 18:00"), MaxAttendees = 3300, Bookings = 1000 });
        await http.PostAsJsonAsync("https://localhost:7206/events/create", new Event { Name = "Event 3", Description = "Event 3 Description, Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.", Type = EventType.Concert, Start = DateTime.Parse("2025-04-03 18:00"), End = DateTime.Parse("2025-04-04 00:00"), MaxAttendees = 1000, Bookings = 550 });
    }

    private async Task GetEventsAsync()
    {
        try
        {
            // Call your API and deserialize the response into the 'events' list
            events = await http.GetFromJsonAsync<List<Event>>("https://localhost:7206/events");

            // You can log the data or inspect if needed
            Console.WriteLine($"Events fetched: {events.Count}");
            if (events.Count == 0)
            {
                await AddEventsWhenLoading();
                nav.NavigateTo("/", true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching events: {ex.Message}");
        }
    }

    public class Event
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public EventType Type { get; set; }
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public int MaxAttendees { get; set; }
        public int Bookings { get; set; }
    }

    private class UserRole
    {
        public string username { get; set; }
        public string role { get; set; }
    }

    public enum EventType
    {
        Concert = 0,
        Festival,
        Theatre,
        Other
    }

    void Search() {
        SearchResultsFound = 0;
    }

    // Popup Methods
    public bool ShowPopup = false;
    public string PopupTitle = "Are you sure?";
    public RequestType PostRequestType = RequestType.None;
    public int PostRequestId = 0;
    public int PostRequestBookings = 0;
    public List<TicketResponse>? tickets;

    void DisplayPopup(int Id, RequestType Type, int Bookings)
    {
        PostRequestId = Id;
        PostRequestType = Type;
        PostRequestBookings = Bookings;

        if (PostRequestType == RequestType.Delete)
        {
            PopupTitle = "Are you sure you want to delete this event?";
        } else if (PostRequestType == RequestType.BookTicket)
        {
            PopupTitle = "Are you sure you want to book this ticket?";
        } else {
            PopupTitle = "Are you sure?";
        }

        ShowPopup = true;
    }

    void PopupConfirmed()
    {
        if (PostRequestType == RequestType.Delete) {
            EventDeleteRequest(PostRequestId);
        }
        if (PostRequestType == RequestType.BookTicket)
        {
            EventBookTicketRequest(PostRequestId, PostRequestBookings);
        }
        ShowPopup = false;
    }

    void PopupCanceled()
    {
        ShowPopup = false;
        PostRequestType = RequestType.None;
        PostRequestId = 0;
    }

    public enum RequestType
    {
        None = 0,
        Delete,
        BookTicket
    }

    public class TicketResponse
    {
        public int TicketId { get; set; }
        public int EventId { get; set; }
    }

    private async Task LoadTickets(int eventId)
    {
        try
        {
            var request = await authService.CreateAuthorizedRequestMessage(
                HttpMethod.Get, $"https://localhost:7206/tickets/event/{eventId}");
            
            var response = await http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                tickets = await response.Content.ReadFromJsonAsync<List<TicketResponse>>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await authService.LogoutAsync();
                nav.NavigateTo("/login");
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching tickets: {ex.Message}");
        }
    }

    // Event CRUD Methods
    async void EventDeleteRequest(int Id)
    {
        Console.WriteLine($"Delete Request to Event ID: {Id}");
        await LoadTickets(Id);
        
        if (tickets != null)
        {
            foreach (var ticket in tickets)
            {
                var deleteTicketRequest = await authService.CreateAuthorizedRequestMessage(
                    HttpMethod.Delete, $"https://localhost:7206/tickets/{ticket.TicketId}");
                
                await http.SendAsync(deleteTicketRequest);
            }
        }
        
        // Delete the event
        var deleteEventRequest = await authService.CreateAuthorizedRequestMessage(
            HttpMethod.Delete, $"https://localhost:7206/events/delete/{Id}");
        
        await http.SendAsync(deleteEventRequest);
        
        nav.NavigateTo("/", true);
    }

    async Task EventBookTicketRequest(int Id, int CurrentBookings)
    {
        Console.WriteLine($"BookTicket Request to Event ID: {Id}");
        await BookTicket(Id);
    }

    private async Task BookTicket(int eventId)
    {
        try
        {
            // Get request with auth token
            var request = await authService.CreateAuthorizedRequestMessage(
                HttpMethod.Post, "https://localhost:7206/tickets/book");
            
            var bookingRequest = new { EventId = eventId };
            request.Content = JsonContent.Create(bookingRequest);
            
            var response = await http.SendAsync(request);
            
            if (response.IsSuccessStatusCode)
            {
                // After successful booking, navigate to MyTickets page
                nav.NavigateTo("/mytickets");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                // Redirect to login if unauthorized
                await authService.LogoutAsync(); // Clear invalid token
                nav.NavigateTo("/login");
            }
            else
            {
                Console.Error.WriteLine($"Booking error: {response.StatusCode}");
                await response.Content.ReadAsStringAsync().ContinueWith(task => 
                    Console.Error.WriteLine($"Response content: {task.Result}"));
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Exception in BookTicket: {ex.Message}");
        }
    }
}
